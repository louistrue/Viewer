// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
import { Alignment } from '../../fragments/index/alignment.js';
export class CivilData {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCivilData(bb, obj) {
        return (obj || new CivilData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCivilData(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CivilData()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    alignments(index, obj) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? (obj || new Alignment()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    }
    alignmentsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    coordinationMatrix(index) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    coordinationMatrixLength() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    coordinationMatrixArray() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    static startCivilData(builder) {
        builder.startObject(2);
    }
    static addAlignments(builder, alignmentsOffset) {
        builder.addFieldOffset(0, alignmentsOffset, 0);
    }
    static createAlignmentsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addOffset(data[i]);
        }
        return builder.endVector();
    }
    static startAlignmentsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addCoordinationMatrix(builder, coordinationMatrixOffset) {
        builder.addFieldOffset(1, coordinationMatrixOffset, 0);
    }
    static createCoordinationMatrixVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startCoordinationMatrixVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static endCivilData(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createCivilData(builder, alignmentsOffset, coordinationMatrixOffset) {
        CivilData.startCivilData(builder);
        CivilData.addAlignments(builder, alignmentsOffset);
        CivilData.addCoordinationMatrix(builder, coordinationMatrixOffset);
        return CivilData.endCivilData(builder);
    }
}
//# sourceMappingURL=civil-data.js.map