// automatically generated by the FlatBuffers compiler, do not modify
import * as flatbuffers from 'flatbuffers';
export class CivilCurve {
    constructor() {
        this.bb = null;
        this.bb_pos = 0;
    }
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsCivilCurve(bb, obj) {
        return (obj || new CivilCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsCivilCurve(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new CivilCurve()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    points(index) {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    }
    pointsLength() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    }
    pointsArray() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    }
    data(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    static startCivilCurve(builder) {
        builder.startObject(2);
    }
    static addPoints(builder, pointsOffset) {
        builder.addFieldOffset(0, pointsOffset, 0);
    }
    static createPointsVector(builder, data) {
        builder.startVector(4, data.length, 4);
        for (let i = data.length - 1; i >= 0; i--) {
            builder.addFloat32(data[i]);
        }
        return builder.endVector();
    }
    static startPointsVector(builder, numElems) {
        builder.startVector(4, numElems, 4);
    }
    static addData(builder, dataOffset) {
        builder.addFieldOffset(1, dataOffset, 0);
    }
    static endCivilCurve(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createCivilCurve(builder, pointsOffset, dataOffset) {
        CivilCurve.startCivilCurve(builder);
        CivilCurve.addPoints(builder, pointsOffset);
        CivilCurve.addData(builder, dataOffset);
        return CivilCurve.endCivilCurve(builder);
    }
}
//# sourceMappingURL=civil-curve.js.map